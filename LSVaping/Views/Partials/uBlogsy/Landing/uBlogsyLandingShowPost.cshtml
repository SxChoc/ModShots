@*
    Shows post for landing. This is almost identical to /Post/uBlogsyPostShowPost.cshtml but gives you the option to customise it individually.
*@

@using uBlogsy.BusinessLogic
@inherits UmbracoTemplatePage
@{
                /**/

                // image settings
                const string defaultImage = ""; // change this if want a default image. eg "http://placekitten.com/g/300/200/", else make it null (no "")
                const int imageHieght = -1; // -1 if no height specified
                const int imageWidth = 300;

                var node = (IPublishedContent)ViewData["Node"];

                var url = Request.QueryString.Count == 0 ? node.Url() : string.Format("{0}?{1}", node.Url(), Request.QueryString);

                @ShowPost(node, url, imageHieght, imageWidth, defaultImage)
}



@helper ShowPost(IPublishedContent node, string url, int imageHieght, int imageWidth, string defaultImage)
    {
                        /**/
        <div class="single-blog margin-blog">
            <div class="blog-img">
                <a href="@url">
                    @{
                        var imageString = node.GetProperty("uBlogsyPostImage").DataValue.ToString();
                        if (imageString != "")
                        {
                            var imageGuidUdi = GuidUdi.Parse(imageString);
                            // Get the ID of the node!
                            var imageNodeId = ApplicationContext.Current.Services.EntityService.GetIdForKey(imageGuidUdi.Guid, (UmbracoObjectTypes)Enum.Parse(typeof(UmbracoObjectTypes), imageGuidUdi.EntityType, true));

                            // Finally, get the node.
                            var imageNode = Umbraco.TypedMedia(imageNodeId.Result);

                            <img src="@imageNode.Url" alt="@node.GetPropertyValue("uBlogsyContentTitle")">
                        }
                    }
                </a>

                <div class="blog-up-text">
                    <span class="date">@(node.GetPropertyValue<DateTime>("uBlogsyPostDate").ToString("dd"))</span>
                    <span class="month">@(node.GetPropertyValue<DateTime>("uBlogsyPostDate").ToString("MMMM yyyy"))</span>
                </div>
            </div>
            <div class="blog-inner-content">
                <div class="blog-inner-text">
                    <div class="blog-title">
                        <a href="@url" title="@node.GetPropertyValue("uBlogsyContentTitle")"><h4>@node.GetPropertyValue("uBlogsyContentTitle")</h4></a>
                    </div>
                    <div class="post-time">
                        @{
                            var authorID = node.GetProperty("uBlogsyPostAuthor").DataValue;
                            var authorNode = Umbraco.TypedContent(authorID);
                            var authorName = authorNode.GetPropertyValue("uBlogsyAuthorName");
                        }
                        <span class="post-date"><i class="fa fa-user"></i> Posted By @authorName</span>
                        @*<span class="comment"><i class="fa fa-comment-o"></i> <a href="#">21 Comments</a></span>*@
                    </div>
                </div>
                <div class="blog-pragraph">
                    <p>@RenderPostBody(node)</p>
                </div>
                <div class="blog-button">
                    <a class="blog-readmore" href="@url">read more <span><i class="fa fa-long-arrow-right"></i></span></a>
                </div>
            </div>
        </div>
                        /**/
}






@helper RenderPostBody(IPublishedContent d)
    {
                        /**/

                        var useSummary = DataService.Instance.GetValueFromLanding(d, "uBlogsyGeneralUseSummary");

                        if (useSummary == "True")
                        {
                            @Html.Raw(d.GetPropertyValue("uBlogsyContentSummary"))
                        }
                        else
                        {
                            @Html.Raw(library.RenderMacroContent(d.GetPropertyValue<string>("uBlogsyContentBody"), d.Id))
                        }
}





@helper RenderPostImage(IPublishedContent node, int imageHieght, int imageWidth, string defaultImage)
    {
                        /**/

                        var imageId = node.GetPropertyValue<string>("uBlogsyPostImage");

                        if (string.IsNullOrWhiteSpace(imageId) && string.IsNullOrWhiteSpace(defaultImage))
                        {
                            // no property or default so do nothing
                            return;
                        }

                        var imageData = new Dictionary<string, object>()
                     {
                         {"Alias", "uBlogsyPostImage"},
                         {"Suffix", ""},
                         {"Height", imageHieght},
                         {"Width", imageWidth},
                         {"CssClass", "uBlogsy_post_image"},
                         {"Title", "Main Image"},
                         {"Map", string.Empty },
                         {"DefaultImage", defaultImage},
                         {"Node", node}
                     };

                        <a href="@node.Url" title="Post image">
                            <figure class="uBlogsy_post_image">
                                @Html.Partial("~/Views/Partials/uBlogsy/Shared/uBlogsyShowImage.cshtml", imageData)
                            </figure>
                        </a>
        }
